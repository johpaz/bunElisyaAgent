import { Elysia } from 'elysia';
import { config } from './utils/config.js';
import { logger } from './utils/logger.js';
import { testConnection } from './database/client.js';
import { createSchema } from './database/schema.js';
import { WebhookService } from './services/webhookService.js';
import { AudioService } from './services/audioService.js';
import { WhatsAppService } from './services/whatsappService.js';
import { WhatsAppAgent } from './agents/whatsappAgent.js';
import { AgentMemory, setDatabaseAvailability } from './agents/memory.js';
import { getOpenAIService } from './services/openaiService.js';
import { healthRoutes, setHealthCheckDependencies } from './routes/healthRoutes.js';
import { webhookRoutes, setProcessIncomingMessageHandler, setWhatsAppService, setWhatsAppAgent } from './routes/webhookRoutes.js';
import { getConfigForEnvironment } from './services/messageProcessingConfig.js';

// Flag global para indicar si la base de datos est√° disponible
let isDatabaseAvailable = false;
import {
  WhatsAppWebhookPayload,
  WhatsAppMessage,
  WhatsAppTextMessage,
  WhatsAppMediaMessage,
  ValidationError,
  WhatsAppError
} from './types/index.js';

/**
 * Punto de entrada principal del servidor Elysia para el agente conversacional de WhatsApp
 * Integra todos los servicios: WhatsApp, Webhook, Audio, Agente y Base de datos
 */

// Inicializar servicios principales
const webhookService = new WebhookService();
const audioService = new AudioService();
const whatsappService = new WhatsAppService();
const whatsappAgent = new WhatsAppAgent();

// WhatsAppAgent ya est√° inicializado arriba
logger.info('üîß WhatsAppAgent creado en index.ts', { hasWhatsAppAgent: !!whatsappAgent });

// Verificar que el WhatsAppAgent se cre√≥ correctamente
if (!whatsappAgent) {
  throw new Error('Error cr√≠tico: WhatsAppAgent no pudo ser creado');
}



/**
 * Funci√≥n para inicializar la aplicaci√≥n
 * Valida configuraci√≥n y conecta a base de datos
 */
async function initializeApp(): Promise<void> {
  try {
    logger.info('Iniciando servidor Bun Elysya - Agente WhatsApp');
    logger.info('üî• Hot reload activado - cambios en c√≥digo se aplicar√°n autom√°ticamente');

    // La configuraci√≥n ya est√° validada autom√°ticamente al importar el m√≥dulo
    logger.info('‚úÖ Configuraci√≥n validada autom√°ticamente al inicio');

    // Configurar dependencias de las rutas ANTES de cualquier inicializaci√≥n as√≠ncrona
    // para evitar condici√≥n de carrera con webhooks entrantes
    logger.info('üîß Configurando handlers de rutas antes de inicializaci√≥n as√≠ncrona');
    setProcessIncomingMessageHandler(processIncomingMessage);
    setWhatsAppService(whatsappService);
    logger.info('üîß Configurando WhatsAppAgent en webhookRoutes', { hasWhatsAppAgent: !!whatsappAgent });
    setWhatsAppAgent(whatsappAgent);
    logger.info('‚úÖ Handlers de rutas configurados exitosamente');

    // Probar conexi√≥n a base de datos (opcional)
    logger.info('Verificando conexi√≥n a base de datos...');
    isDatabaseAvailable = false;
    try {
      if (config.databaseUrl) {
        isDatabaseAvailable = await testConnection();
        if (isDatabaseAvailable) {
          logger.info('‚úÖ Conexi√≥n a base de datos establecida');

          // Crear esquemas de base de datos si no existen
          logger.info('Creando esquemas de base de datos si no existen...');
          await createSchema();
          logger.info('‚úÖ Esquemas de base de datos creados/verificados');

          // Limpiar sesiones expiradas al inicio
          logger.info('Limpiando sesiones expiradas...');
          const cleanedSessions = await AgentMemory.cleanupExpiredSessions();
          if (cleanedSessions > 0) {
            logger.info(`‚úÖ ${cleanedSessions} sesiones expiradas limpiadas`);
          }
        } else {
          logger.warn('‚ö†Ô∏è No se pudo conectar a la base de datos - el servidor funcionar√° sin persistencia');
        }
      } else {
        logger.info('‚ÑπÔ∏è Base de datos no configurada - el servidor funcionar√° sin persistencia');
      }
    } catch (error) {
      logger.warn('‚ö†Ô∏è Error al verificar conexi√≥n a base de datos - el servidor funcionar√° sin persistencia', {
        error: error instanceof Error ? error.message : String(error)
      });
    }

    // Establecer el estado de la base de datos en AgentMemory
    setDatabaseAvailability(isDatabaseAvailable);

    // Inicializar servicio OpenAI si est√° configurado
    if (config.apiKeyOpenAI) {
      try {
        logger.info('Inicializando servicio OpenAI...');
        const openAIService = getOpenAIService();
        const isAvailable = await openAIService.isAvailable();
        if (isAvailable) {
          logger.info('‚úÖ Servicio OpenAI inicializado correctamente');
        } else {
          logger.warn('‚ö†Ô∏è Servicio OpenAI inicializado pero no disponible');
        }
      } catch (error) {
        logger.error('‚ùå Error inicializando servicio OpenAI', {
          error: error instanceof Error ? error.message : String(error)
        });
      }
    } else {
      logger.info('‚ÑπÔ∏è API Key de OpenAI no configurada - usando respuestas est√°ticas');
    }

    // Configurar dependencias de las rutas restantes
    setHealthCheckDependencies(isDatabaseAvailable, whatsappService, audioService);

    // Verificar que todas las dependencias cr√≠ticas est√©n configuradas
    if (!whatsappAgent) {
      logger.error('‚ùå CR√çTICO: WhatsAppAgent no est√° disponible despu√©s de la configuraci√≥n');
      throw new Error('WhatsAppAgent no pudo ser configurado correctamente');
    }
    if (!whatsappService) {
      logger.error('‚ùå CR√çTICO: WhatsAppService no est√° disponible despu√©s de la configuraci√≥n');
      throw new Error('WhatsAppService no pudo ser configurado correctamente');
    }
    if (!processIncomingMessage) {
      logger.error('‚ùå CR√çTICO: processIncomingMessage no est√° disponible despu√©s de la configuraci√≥n');
      throw new Error('processIncomingMessage no pudo ser configurado correctamente');
    }
    logger.info('‚úÖ Todas las dependencias cr√≠ticas verificadas correctamente', {
      hasWhatsAppAgent: !!whatsappAgent,
      hasWhatsAppService: !!whatsappService,
      hasProcessIncomingMessage: !!processIncomingMessage
    });
    

    logger.info('üöÄ Servidor inicializado correctamente', {
      databaseAvailable: isDatabaseAvailable,
      port: config.port
    });

    // Log adicional para verificar que no hay doble inicializaci√≥n
    logger.info('üîç Verificaci√≥n: Solo una instancia del servidor ejecut√°ndose');
  } catch (error) {
    logger.error('‚ùå Error durante la inicializaci√≥n', {
      error: error instanceof Error ? error.message : String(error)
    });
    process.exit(1);
  }
}

/**
 * Funci√≥n para procesar mensajes entrantes de WhatsApp
 * Implementa el flujo completo: recepci√≥n ‚Üí procesamiento ‚Üí respuesta
 */
async function processIncomingMessage(message: WhatsAppMessage): Promise<void> {
  const startTime = Date.now();
  try {
    logger.info('üì® Iniciando procesamiento de mensaje entrante', {
      messageId: message.id,
      from: message.from,
      type: message.type,
      timestamp: new Date().toISOString()
    });

    const waId = message.from; // WA ID como identificador de usuario
    logger.info('Tipo de mensaje recibido', { type: message.type, messageId: message.id });
    logger.debug('Identificador de usuario extra√≠do', { waId, messageId: message.id });

    // Determinar tipo de mensaje y procesar seg√∫n corresponda
    if (message.type === 'text') {
      logger.debug('Procesando mensaje de tipo texto', { messageId: message.id, waId });

      // Procesar mensaje de texto directamente
      const textMessage = message as WhatsAppTextMessage;
      logger.debug('Contenido del mensaje de texto', {
        messageId: message.id,
        bodyLength: textMessage.text.body.length,
        bodyPreview: textMessage.text.body.substring(0, 50) + (textMessage.text.body.length > 50 ? '...' : '')
      });

      logger.info('Llamando al agente para procesar mensaje de texto', { messageId: message.id, waId });
      const response = await whatsappAgent.processTextMessage(waId, textMessage.text.body, message.id);
      logger.info('Respuesta del agente obtenida, enviando respuesta', { messageId: message.id, waId });
      logger.debug('Respuesta del agente generada', {
        messageId: message.id,
        responseLength: response.length,
        responsePreview: response.substring(0, 50) + (response.length > 50 ? '...' : '')
      });

      // Enviar respuesta v√≠a WhatsApp
      logger.debug('Enviando respuesta v√≠a WhatsApp', { messageId: message.id, waId });
      await whatsappService.sendTextMessage(waId, response);

      const duration = Date.now() - startTime;
      logger.info('‚úÖ Mensaje de texto procesado y respondido exitosamente', {
        messageId: message.id,
        waId,
        responseLength: response.length,
        duration: `${duration}ms`
      });

    } else if (message.type === 'audio') {
      logger.debug('Procesando mensaje de tipo audio', { messageId: message.id, waId });

      // Procesar mensaje de voz: descargar ‚Üí transcribir ‚Üí procesar
      const mediaMessage = message as WhatsAppMediaMessage;
      const audioId = mediaMessage.audio?.id;

      if (!audioId) {
        throw new WhatsAppError('ID de audio no encontrado en mensaje');
      }

      logger.info('üéµ Procesando mensaje de voz', { audioId, waId, messageId: message.id });

      // Paso 1: Transcribir audio
      logger.debug('Iniciando transcripci√≥n de audio', { audioId, messageId: message.id });
      const transcriptionResult = await audioService.processWhatsAppAudio(audioId);

      if (!transcriptionResult.success || !transcriptionResult.text) {
        throw new WhatsAppError(`Error en transcripci√≥n: ${transcriptionResult.error || 'Unknown error'}`);
      }

      logger.info('üìù Audio transcrito exitosamente', {
        audioId,
        messageId: message.id,
        transcriptionLength: transcriptionResult.text.length,
        transcriptionPreview: transcriptionResult.text.substring(0, 50) + (transcriptionResult.text.length > 50 ? '...' : '')
      });

      // Paso 2: Procesar transcripci√≥n con el agente
      logger.debug('Procesando transcripci√≥n con el agente', { messageId: message.id, waId });
      logger.info('Llamando al agente para procesar mensaje de voz', { messageId: message.id, waId });
      const response = await whatsappAgent.processVoiceMessage(waId, transcriptionResult.text, message.id);
      logger.info('Respuesta del agente obtenida para mensaje de voz, enviando respuesta', { messageId: message.id, waId });

      // Paso 3: Enviar respuesta
      logger.debug('Enviando respuesta de voz v√≠a WhatsApp', { messageId: message.id, waId });
      await whatsappService.sendTextMessage(waId, response);

      const duration = Date.now() - startTime;
      logger.info('‚úÖ Mensaje de voz procesado y respondido exitosamente', {
        messageId: message.id,
        waId,
        audioId,
        transcriptionLength: transcriptionResult.text.length,
        responseLength: response.length,
        duration: `${duration}ms`
      });

    } else {
      logger.info('üì® Procesando mensaje de tipo no soportado', {
        messageId: message.id,
        waId,
        type: message.type
      });

      // Para otros tipos de mensaje, enviar respuesta gen√©rica
      const response = `Recib√≠ tu mensaje de tipo ${message.type}. Por ahora solo proceso mensajes de texto y voz.`;
      await whatsappService.sendTextMessage(waId, response);

      const duration = Date.now() - startTime;
      logger.info('üì® Mensaje de tipo no soportado procesado', {
        messageId: message.id,
        waId,
        type: message.type,
        duration: `${duration}ms`
      });
    }

  } catch (error) {
    const duration = Date.now() - startTime;
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error('‚ùå Error procesando mensaje entrante', {
      messageId: message.id,
      waId: message.from,
      type: message.type,
      duration: `${duration}ms`,
      error: errorMessage,
      stack: error instanceof Error ? error.stack : undefined
    });

    // Intentar enviar mensaje de error al usuario
    try {
      const waId = message.from;
      logger.debug('Intentando enviar mensaje de error al usuario', { waId, messageId: message.id });
      await whatsappService.sendTextMessage(
        waId,
        `Lo siento, ocurri√≥ un error procesando tu mensaje: ${errorMessage}`
      );
      logger.debug('Mensaje de error enviado exitosamente', { waId, messageId: message.id });
    } catch (sendError) {
      logger.error('‚ùå Error enviando mensaje de error al usuario', {
        waId: message.from,
        messageId: message.id,
        error: sendError instanceof Error ? sendError.message : String(sendError),
        stack: sendError instanceof Error ? sendError.stack : undefined
      });
    }
  }
}

// Crear aplicaci√≥n Elysia
// Crear aplicaci√≥n Elysia
const app = new Elysia()
  .onError(({ code, error, set }) => {
    // Funci√≥n auxiliar para extraer mensaje de error de forma segura
    const getErrorMessage = (err: any): string => {
      if (err instanceof Error) return err.message;
      if (typeof err === 'string') return err;
      if (err && typeof err === 'object' && 'message' in err) return String(err.message);
      return 'Unknown error';
    };

    const errorMessage = getErrorMessage(error);
    
    console.log('ERROR', error);
    
    switch (code) {
      case 'NOT_FOUND':
        set.status = 404;
        return {
          status: 404,
          message: `Route not found: ${errorMessage}`
        };
      
      case 'VALIDATION':
        set.status = 400;
        return {
          status: 400,
          message: `Validation failed: ${errorMessage}`,
          errors: 'validator' in error ? error.validator : undefined
        };
      
      default:
        set.status = 500;
        return {
          status: 500,
          message: `Internal Server Error: ${errorMessage}`
        };
    }
  })
  .use(healthRoutes)
  .use(webhookRoutes);

// Iniciar servidor
async function startServer() {
  try {
    await initializeApp();

    try {
    
      const server = app.listen(config.port);
    
      logger.info(`üöÄ Servidor Elysia ejecut√°ndose en puerto ${config.port}`);
      logger.info(`üì± Webhook URL: http://localhost:${config.port}/webhook`);
      logger.info(`üíö Health check: http://localhost:${config.port}/health`);
      logger.info(`üíæ Estado de base de datos: ${isDatabaseAvailable ? 'Disponible' : 'No disponible (funcionando en memoria)'}`);
    } catch (listenError) {
      logger.error('‚ùå Error al iniciar el servidor HTTP', {
        error: listenError instanceof Error ? listenError.message : String(listenError),
        stack: listenError instanceof Error ? listenError.stack : undefined,
        port: config.port
      });
      throw listenError;
    }

  } catch (error) {
    logger.error('‚ùå Error iniciando servidor', {
      error: error instanceof Error ? error.message : String(error)
    });
    process.exit(1);
  }
}

// Manejo de se√±ales para cierre graceful
process.on('SIGINT', async () => {
  logger.info('üõë Recibida se√±al SIGINT, cerrando servidor...');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('üõë Recibida se√±al SIGTERM, cerrando servidor...');
  process.exit(0);
});

// Iniciar la aplicaci√≥n
startServer().catch((error) => {
  logger.error('‚ùå Error fatal iniciando aplicaci√≥n', {
    error: error instanceof Error ? error.message : String(error)
  });
  process.exit(1);
});

export default app;